import Head from "next/head";
import { GetStaticProps, InferGetStaticPropsType } from "next";

import BlockContent from "@sanity/block-content-to-react";
import { recipeData } from "../../queries/recipes";
import { SanityImage } from "../../components/image/SanityImage";

export const getStaticProps: GetStaticProps = async (context) => {
  const pageProps = await recipeData(context);

  return {
    props: {
      page: pageProps?.data || null,
      params: context.params,
    },
  };
};

export async function getStaticPaths() {
  return {
    paths: ["/recipes/[slug]"],
    fallback: true,
  };
}

export const Page = (data: InferGetStaticPropsType<typeof getStaticProps>) => {
  let recipe;
  if (data?.page != undefined) {
    recipe = data?.page[0];
  }

  console.log("data", data);

  return (
    <>
      <Head>
        <title>{recipe?.title}</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div
          className={
            "container bg-white mx-auto m-10 p-10 rounded overflow-hidden shadow-xl mt-4 flex-none"
          }
        >
          <div className="grid grid-cols-2 gap-6">
            <div className="p-5">
              {recipe ? (
                <div className="">
                  <SanityImage
                    image={recipe?.mainImage}
                    alt={recipe?.title + " image"}
                    width={700}
                  />
                  <div className="flex items-center pt-4">
                    <SanityImage
                      className="w-10 h-10 rounded-full mr-4"
                      image={recipe?.author?.image}
                      width={10}
                      alt={"test"}
                    />
                    <div className="text-sm">
                      <p className="text-gray-900 leading-none">
                        {recipe?.author?.name}
                      </p>
                      {recipe?.publishedAt ? (
                        <p className="text-gray-600">
                          {recipe?.publishedAt.slice(0, 10)}{" "}
                        </p>
                      ) : null}
                    </div>
                  </div>
                  <p>Servings: {recipe?.servings}</p>

                  <p>Prep Time: {recipe?.prepTime}</p>
                  <p>Cook Time: {recipe?.cookTime}</p>
                </div>
              ) : null}
            </div>
            <div
              className="p-5"
              style={{ maxHeight: "650px", overflowY: "scroll" }}
            >
              <h1>{recipe?.title}</h1>
              <h2 className="pb-2 pt-2">Description:</h2>
              {recipe?.description ? (
                <BlockContent blocks={recipe?.description}></BlockContent>
              ) : null}
              {/* <p>
              Total Time:{" "}
              {Number.isNaN(recipe?.prepTime)
                ? (recipe.prepTime = 0)
                : recipe.prepTime}
              {Number.isNaN(recipe?.cookTime)
                ? (recipe.cookTime = 0)
                : recipe.cookTime}
              Minutes
            </p> */}
              <h2 className="pb-2 pt-2">Ingredients:</h2>
              {recipe?.ingredients ? (
                <BlockContent blocks={recipe?.ingredients}></BlockContent>
              ) : null}
              <h2 className="pt-2 pb-2">Directions:</h2>
              {recipe?.body ? (
                <BlockContent blocks={recipe?.body}></BlockContent>
              ) : null}
              <br></br>
              <hr></hr>
              {recipe?.embeddedLink ? <p>{recipe.embeddedLink} test</p> : null}
              <div className="grid grid-cols-2 mt-4">
                {" "}
                <h2 className="pb-2">Categories: </h2>
                <h2 className="pb-4">Sub Categories: </h2>
                {recipe?.categories?.map((category: any) => (
                  <div>
                    <span className="inline-block bg-gray-200 rounded-full px-3 py-1 text-md font-semibold text-gray-700 mr-2 mb-2">
                      <a
                        href={"/categories/" + category.slug.current}
                        key={Math.random()}
                      >
                        {category.title}
                      </a>
                    </span>

                    <br></br>
                  </div>
                ))}
                {recipe?.subCategory?.map((category: any) => (
                  <div>
                    <span className="inline-block bg-gray-200 rounded-full px-3 py-1 text-md font-semibold text-gray-700 mr-2 mb-2">
                      <a
                        href={"/subCategories/" + category.slug.current}
                        key={Math.random()}
                      >
                        {category.title}
                      </a>
                    </span>
                    <br></br>
                  </div>
                ))}
              </div>
              <br></br>
              <hr></hr>
              {recipe?.note ? (
                <div>
                  <h2 className="pb-4">Chef's Note: </h2>
                  <p className="font-thin">{recipe.note}</p>
                </div>
              ) : null}
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Page;
